# -*- coding: utf-8 -*-
"""LabCE00.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12BSwVDiCY0htzbHu3GXaBPQxx5uX8LJV

#Laboratório de Circuitos eletrônicos - 00
##Regressão linear e linearização de exponenciais/logarítmica
"""

import numpy as np
import matplotlib.pyplot as plt
from math import e

"""#Regressão linear
##Método dos mínimos quadrados
###$Y = MX + B$  (1)
##Coeficientes angular e linear

###$M = \frac{n∑(XY) - ∑X∑Y}{n∑x^2-(∑X)^2}$ (2a)

###$B = \frac{∑Y∑X^2 - ∑X∑(XY)}{n∑X^2-(∑X)^2}$ (2b)

$n :$ quantidade de dados

$M :$ coeficiente angular

$B :$ coefiente linear

###Exemplo:

####Encontre os dados que interpola os dados da tablea:
P|1  |1,02 |1,034 |1,052 |1,073
-|----|------|-------|-------|------
T|273|278  |283    |288    |293

$n = 5$
"""

#Definindo a quantidade e os dados iniciais
n  = 5
x  = [1,1.02,1.034,1.052,1.073]
y  = [273,278,283,288,293]
xy = []
x2 = []
y_reg = []
#calculos intermediarios uteis
for i in range(n):
  xy.append(x[i] * y[i])
  x2.append(x[i] ** 2)

#Utilizando (2a)
m = (n * sum(xy) - sum(x) * sum(y)) / (n * sum(x2) - (sum(x) ** 2))

#utilizando (2b)
b = (sum(y) * sum(x2) - sum(x) * sum(xy))  / (n * sum(x2) - (sum(x) ** 2))

for i in range(n):
  y_reg.append((m * x[i]) + b)

"""###Gráfico da curva"""

plt.scatter(x,y,label='high income low saving',color='g')
plt.show()

x_axis = []
y_axis = []
for j in range(n):
  x_axis.append(x[j])
  y_axis.append(y_reg[j])

"""##Gráfico da curva com regressao"""

#Curva da regressao linear
plt.figure()
plt.scatter(x,y,label='high income low saving',color='g')
plt.plot(x_axis,y_axis)
plt.grid()
plt.show()

"""#Linearização de exponenciais/logarítmica

###$Y = Y_{0}e^{βX}$ (3)

###$ \ln{Y} = \ln{Y_{0}} + βX$ (4)

###Exemplo:

####Determine $Y_0$ e $β$ de (3) para:

Q(C) | t(s)       
-------|-------
13,2   | 1               
6,8    | 3               
3,5    | 5                
1,8    | 7              
0,92   | 9
"""

